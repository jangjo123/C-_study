오늘의 주제: 프로세스

프로세스란? 실행중인 프로그램
리눅스 자체는 그냥 OS
여기서 실행되는 어떤 프로그램이 서버(데몬deamon) 역할을 한다.

리눅스 프로세스 특징:
1) PID 고유 번호가 있음
- systemd (1)
- kthreadd (2)
2) 부모-자식 관계 형
base shell - vi
- 통상적으로 자식이 종료할 때 부모에게 종료 정보를 보냄
- 부모가 종료 정보를 받아서 프로세스 테이블(실행 목록)에서 자식 제거
(탄생/소멸을 모두 관리해주는 친절한 부모님,,)

예외)
Q1) 자식이 정료하기 전에 부모가 먼저 종료?
 -> 자식 프로세스 [고아 프로세스]가 된다.
     1번 프로세스에게 입양되어서 새 부모를 갖게 됨.
Q2) 자식이 종료했는데 부모가 특정 이유로 자식 제거 처리를 안하면?
 -> 자식 프로세스는 [좀비 프로세스]가 되어, 리소스를 차지한 채 남게 됨.
 -> [좀비 프로세스]가 누적 되면, 리소스 낭비도 누적

프로세스 목록 확인

ps (proces)
- 없음	현재 셀/터미널에서 실행한 사용자의 프로세스
- e	(executing) 실행중인 모든 프로세스 정보 출력
- f	(further) 자세한 정보 출력
- u [uid]	지정한 사용자에 대한 모든 프로세스 출력
- p [pid]	지정한 pID의 프로세스 정보 출력


UID	UserId
PID	ProcessId
PPID	ParentProcessId
C	CPU 사용량
STIME	프로세스 시작 시간
TTY	프로세스가 실행된 터미널 종류/번호
TIME	프로세스 실행 시간
CMD	프로그램 이름

프로세스 종료(응답없거나, 좀비라거나)
1) PID를 알아야함 (ps -ef)
2) kill (pkill) 사용
3) 은근히 신사적으로 처리. 강제정료X 해당 프로세스에 시그널을 보냄
4) 시그널(신호) kill -l

시그널 번호가 있는 것은 -> 종료 이유를 명확하게 알기 위함
SIGHUP	(1) 터미널과 연결이 끊어졌을 때
SIGINT	(2) Ctrl+C 사용자 강제 종료
SIGKILL	(9) 강제 종료
SIGTERM	(15) Kill 기본 시그널

kill [-시그널번호(옵션)] [PID]
pkill [이름]

top 프로세스 관리창 (Ctrl Alt Del 느낌)
- h (help)
- k (kill)
- u (특정 유저)
- M (사용 메모리에 따라 정렬)
- P (CPU 사용량에따라 정렬)

백그라운드 프로세스
- 우리가 기본적으로 사용하는건 포그라운드(foreground) 작업
ex) sleep 5

- 대기하는 동안 다른 작업을 시키고 싶다면?

&를 붙이면 백그라운드에서 실행 됨

(sleep2; echo 일어남^^)&
입력창이 뒤섞일 수 있다.

redirection을 이용
(sleep2; echo 일어남^^ > wakeup.txt 2>&1)&

백그라운드 작업 보기
jobs
bg [%작업번호]
fg  [%작업번호]

작업 예약
- 내일 아침 7시에 관리자에게 서버 현황을 메일로 보고!
- 매일 아침 7시~~

at [옵션] [시간]
-l (예약된 작업 확인 list)
-d (예약된 작업 삭제 delete)

ex) at 00:48am / at 1am tomorrow
at> echo 일어나세요!! > at.txt
Ctrl + D 종료

crontab [-u 사용자][옵션][파일명]
- e : 사용자의 crontab 파일 편집 (edit)
- l  : 파일 목록 출력 (list)
- r  : 파일 삭제 (remove)

분(0~59) 시(0~23) 일(1~31) 월(1~12) 요일(0~6) 작업내용
54 * * * * echo CtronTabTest!! > crom.txt (*은 상관없음)

/var/spool/cron

